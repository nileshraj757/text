# 133


/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
        unordered_map<Node*,Node*> mp;
        if(node==NULL)
            return NULL;
        if(node->neighbors.size()==0)
        {
            Node* clone = new Node(node->val);
            return clone;
        }
        return solver(node,mp);
    }
    
    
    Node* solver(Node* node,unordered_map<Node*,Node*>& mp)
    {
        vector<Node*> v;
        Node* clone = new Node(node->val);
        mp[node]=clone;
        
        for(auto it:node->neighbors)
        {
            if(mp.find(it)!=mp.end())
            {
                v.push_back(mp[it]);
            }
            else{
                v.push_back(solver(it,mp));
            }
        }
        
        clone->neighbors = v;
        return clone;
    }
};
