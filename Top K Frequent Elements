# 347

Method 1 ---------

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        if(nums.size()==1)
            return nums;
        unordered_map<int,int> mp;
        int n = nums.size();
        vector<int> res;
        vector<vector<int>> freq(n+1);
        for(int i=0;i<nums.size();i++)
        {
            mp[nums[i]]++;
        }
        
        for(auto x: mp)
        {
            freq[x.second].push_back(x.first);
        }
        
        for(int i=freq.size()-1;i>=0;i--)
        {
            if(freq[i].size()==0)
                continue;
            else{
                for(int j=0;j<freq[i].size();j++)
                   { res.push_back(freq[i][j]);
                    if(res.size()==k)
                        return res;
                   }
            }
        }
        
        return res;
        
    }
};


Method 2 --------

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        if(nums.size()==1)
            return nums;
        unordered_map<int,int> mp;
        priority_queue<pair<int,int>> pq;
        vector<int> res;
        for(int i=0;i<nums.size();i++)
        {
            mp[nums[i]]++;
        }
        for(auto x: mp)
        {
            pq.push({x.second,x.first});
        }
        for(int j=1;j<=k;j++)
        {
            res.push_back(pq.top().second);
            pq.pop();
        }
        return res;
    }
};
