Here the concept is to calculate minimum distance to travel for each apple.

LEETCODE =  #1443



class Solution {
public:
      int time=0;

    int minTime(int n, vector<vector<int>>& edges, vector<bool>& hasApple) {
        vector<vector<int>> adj(n);
        for(int i=0;i<edges.size();i++)
        {
            adj[edges[i][0]].push_back(edges[i][1]);
             adj[edges[i][1]].push_back(edges[i][0]);
        }
        
      
        return dfs(0,-1,adj,0,hasApple)*2;
    }
    
    int dfs(int node,int parent,vector<vector<int>>&adj,int d,vector<bool>&has)
    {   
        int result=0;
        int temp;
        
       for(int &i:adj[node])
           if(i!=parent)
           {
               temp  = dfs(i,node,adj,d+1,has);
               if(temp)
                   result+=temp-d;
               
           }
        
        return result||has[node]?result+d:0;
            
    }
};
