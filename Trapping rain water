


class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        vector<int> left(n);
        vector<int> right(n);
        int ans=0;
        
        for(int i=1;i<height.size();i++)
        {
            left[i]= max(height[i-1],left[i-1]);
           
        }
        
        for(int i=n-2;i>=0;i--)
        {
            right[i] = max(height[i+1],right[i+1]);
        }
        
        for(int i=0;i<n;i++)
        {
            int level = min(left[i],right[i]);
            if(height[i]<level)
                ans+=level-height[i];
        }
        
        return ans;
        
    }
};




second method 


class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        int ans=0;
        int level=0;
        int l=0,r = n-1;
        while(l<r)
        {
            int lower = height[height[l]<height[r]?l++:r--];
            level = max(level,lower);
            
            if(lower<level)
                ans+=level-lower;
        }
        return ans;
    }
};
