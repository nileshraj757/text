# 994


class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int,int>> q;
        
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[0].size();j++)
            {
                if(grid[i][j]==2)
                    q.push({i,j});
            }
        }
        int time=0;
        queue<pair<int,int>> q1;
        while(!q.empty())
        {
            
            // time++;
            while(!q.empty())
            {
                auto curr = q.front();
                
                if(curr.first-1>=0 && (grid[curr.first-1][curr.second]==1))
                 {   grid[curr.first-1][curr.second]=2;
                    q1.push({curr.first-1,curr.second});}
                if(curr.first+1<grid.size() && (grid[curr.first+1][curr.second]==1))
                  {grid[curr.first+1][curr.second]=2;
                    q1.push({curr.first+1,curr.second});}
                if(curr.second-1>=0 && (grid[curr.first][curr.second-1]==1))
                 {  grid[curr.first][curr.second-1]=2; 
                    q1.push({curr.first,curr.second-1});}
                if(curr.second+1<grid[0].size() && (grid[curr.first][curr.second+1]==1))
                   { grid[curr.first][curr.second+1]=2;
                    q1.push({curr.first,curr.second+1});}
                
            
            q.pop();
            }
            if(q1.size()>0)
                time++;
            
            swap(q,q1);
        }
        
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[0].size();j++)
            {
                if(grid[i][j]==1)
                    return -1;
            }
        }
        
        
        return time;
        
        
        
        
    }
};
