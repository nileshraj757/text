# 234


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL)
            return true;
        ListNode* h = head;
        ListNode* mid = findmid(h);
        ListNode* rev = reverse(mid);
        return comp(head,rev);
    }
    
    
    ListNode* findmid(ListNode* h)
    {
        ListNode* slow = h;
        ListNode* fast = h;
        while(fast &&  fast->next)
        {
         slow = slow->next;
            fast = fast->next;
            if(fast)
                fast=fast->next;
            
        }
        return slow;
    }
    
    ListNode* reverse (ListNode* mid)
    {
        ListNode* prev=NULL;
        ListNode* next = NULL;
        ListNode* curr = mid;
        
        while(curr)
        {
            next = curr->next;
            curr->next =prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    
    bool comp(ListNode* head,ListNode* mid)
    {
        while(head && mid)
        {
            if(mid->val!=head->val)
                return false;
            mid=mid->next;
            head = head->next;
        }
        
        return true;
    }
};
