# 84

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        int res=0;
        vector<int>lsm;
        vector<int>rsm;
        
        left(lsm,heights,n);
        right(rsm,heights,n);
        
        reverse(rsm.begin(),rsm.end());
        
        
        for(int i=0;i<n;i++)
        {
            res = max(res,max((rsm[i]-lsm[i]+1)*heights[i],heights[i]));
        }
        
        return res;
        
        
    }
    
    
    void left(vector<int>&lsm,vector<int>&heights,int n)
    {
        stack<pair<int,int>> st;
        int i=0;
        while(i<n)
        {
            if(st.empty())
            {
                lsm.push_back(0);
                
            }
            
            else if(!st.empty() && st.top().first>=heights[i])
            {
                while(!st.empty() && st.top().first>=heights[i])
                {
                    st.pop();
                }
                if(st.empty())
                    lsm.push_back(0);
                else{
                    lsm.push_back(st.top().second+1);
                }
            }
            else if(!st.empty() && st.top().first<heights[i])
            {
                lsm.push_back(st.top().second+1);
            }
            st.push({heights[i],i});
            i++;
        }
    }
    
     void right(vector<int>&rsm,vector<int>&heights,int n)
    {
        stack<pair<int,int>> st;
        int i=n-1;
        while(i>=0)
        {
            if(st.empty())
            {
                rsm.push_back(n-1);
                
            }
            
            else if(!st.empty() && st.top().first>=heights[i])
            {
                while(!st.empty() && st.top().first>=heights[i])
                {
                    st.pop();
                }
                if(st.empty())
                    rsm.push_back(n-1);
                else{
                    rsm.push_back(st.top().second-1);
                }
            }
            else if(!st.empty() && st.top().first<heights[i])
            {
                rsm.push_back(st.top().second-1);
            }
            st.push({heights[i],i});
            i--;
        }
    }
};
